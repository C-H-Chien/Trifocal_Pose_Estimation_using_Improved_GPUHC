using Base
using HomotopyContinuation
using LinearAlgebra

#> Rotation parametrization: Caylay
function cay2R(x,y,z)
    M = [1+x*x-(y*y+z*z)  2*(x*y-z)         2*(x*z+y);
         2*(x*y+z)        1+y^2-(x*x+z*z)   2*(y*z-x);
         2*(x*z-y)        2*(y*z+x)         1+z*z-(x*x+y*y)];
    return M;
end

#> Set rotations
@var r2[1:3] r3[1:3]
R2 = cay2R(r2[1], r2[2], r2[3]);
R3 = cay2R(r3[1], r3[2], r3[3]);

#> Set translations
@var t2[1:3];
@var t3[1:3];

#> Set parameters
@var x[1:3, 1:3, 1:2];
@var d[1:2, 1:3, 1:2];

#> Set unknowns
@var a[1:3, 1:3];
@var e[1:2, 1:3];
@var u[1:2, 1:3];

#> Point Equations
p = 1
pointEquations2 = a[p,2] * [x[p,2,:];1] - (R2 * (a[p,1] * [x[p,1,:];1]) + t2)
for p = 2:3
    Eq = a[p,2] * [x[p,2,:];1] - (R2 * (a[p,1] * [x[p,1,:];1]) + t2)
    for n = 1:3
        push!(pointEquations2, Eq[n]);
    end
end

p = 1
pointEquations3 = a[p,3] * [x[p,3,:];1] - (R3 * (a[p,1] * [x[p,1,:];1]) + t3)
for p = 2:3
    Eq = a[p,3] * [x[p,3,:];1] - (R3 * (a[p,1] * [x[p,1,:];1]) + t3)
    for n = 1:3
        push!(pointEquations3, Eq[n]);
    end
end
pointEquations = [pointEquations2; pointEquations3];

#> Tangent Equations
p = 1
tangentEquations2 = (e[p,2] * [x[p,2,:];1] + u[p,2] * [d[p,2,:];0]) - (R2 * (e[p,1] * [x[p,1,:];1] + u[p,1] * [d[p,1,:];0]));
for p = 2:2
    Eq = (e[p,2] * [x[p,2,:];1] + u[p,2] * [d[p,2,:];0]) - (R2 * (e[p,1] * [x[p,1,:];1] + u[p,1] * [d[p,1,:];0]))
    for n = 1:3
        push!(tangentEquations2, Eq[n]);
    end
end
p = 1
tangentEquations3 = (e[p,3] * [x[p,3,:];1] + u[p,3] * [d[p,3,:];0]) - (R3 * (e[p,1] * [x[p,1,:];1] + u[p,1] * [d[p,1,:];0]));
for p = 2:2
    Eq = (e[p,3] * [x[p,3,:];1] + u[p,3] * [d[p,3,:];0]) - (R3 * (e[p,1] * [x[p,1,:];1] + u[p,1] * [d[p,1,:];0]))
    for n = 1:3
        push!(tangentEquations3, Eq[n]);
    end
end
tangentEquations = [tangentEquations2; tangentEquations3];

#> Valid unknowns
a_unknowns = [a[2,1], a[3,1], a[1,2], a[2,2], a[3,2], a[1,3], a[2,3], a[3,3]];
e_unknowns = [e[1,2], e[1,3], e[2,2], e[2,3]];

#> All Equations, 30 equations in total
Eqs = [pointEquations; tangentEquations];
variables_list = collect(Iterators.flatten([transpose(a_unknowns), transpose(e_unknowns), transpose(u), t2, t3, r2, r3]));
parameters_list = collect(Iterators.flatten([permutedims(x,[3,2,1]), permutedims(d,[3,2,1]), a[1,1], e[1,1], e[2,1]]))
F = System(Eqs;variables=variables_list, parameters =parameters_list);

S = monodromy_solve(F)
start_solutions = solutions(S);
start_params = S.parameters;

#> Solve with parameters generated by a synthetic multiview dataset
target_params = [
-0.0217459447094487,
0.0549647090162260,
-0.00440484363706022,
-0.0429783061031158,
0.0491668596265155,
-0.0385248747391119,
-0.0234637700055767,
0.0592542726927966,
-0.0114332963934521,
-0.0476994206715616,
0.0525847511068133,
-0.0358869575901973,
0.0397718571638410,
0.0405911990292768,
-0.0393004703719767,
-0.000859563303541838,
0.0285780437881400,
0.0405504922172377,
-8.43667520087946e-05,
0.000377566326875220,
-0.000344414565449283,
-0.000176183291097844,
0.000366329753423099,
0.000124349352821083,
7.14374803834273e-05,
0.000380224914576220,
-0.000114106566016743,
0.000369666240335252,
0.000361793018762422,
-0.000136990586782488,
1102.40527265258,
5.66280423179842,
-7.94100937044595];

#> Solve by homotopy continuation
#R = solve(F, start_solutions; start_parameters=start_params, #target_parameters=target_params)


#> write target solutions to a file
#io = open("/path/where/file/is/written", "w");
#using DelimitedFiles
#writedlm(io, solutions(R));
#close(io)